{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "DOM.Iterable", "ESNext"], // 컴파일 시 포함시켜야하는 JS 내장 API들
    "allowJs": true, // JS files를 허용할 것인가
    "skipLibCheck": true, // 사용하는 라이브러리의 타입 검사를 생략할 것인가
    "esModuleInterop": true, // es module 사용시 컴파일 단계에서 헬퍼 함수를 사용할 것인가
    "allowSyntheticDefaultImports": true,
    "strict": true, // strict family 속성 전부를 true로 할 것인가
    "forceConsistentCasingInFileNames": true, // 사용할 파일의 이름을 대소문자까지 정확하게 작성하도록 강제할 것인가
    "noFallthroughCasesInSwitch": true, // switch문에서 fallthrough case가 발견되면 에러를 발생시킬 것인가
    "module": "ESNext",
    "moduleResolution": "node", // 모듈 해석 전략, 왠만해서는 node로 사용한다.
    "resolveJsonModule": true,
    "isolatedModules": true, // 각 파일을 분리된 모듈로 트랜스파일링할 것인가
    "noEmit": true, // 컴파일러가 Js 파일 등 출력 경과물을 만들지 않을 것인가
    "jsx": "react-jsx", // jsx 코드를 어떻게 컴파일 할 것인가
    "outDir": "./dist",
    "baseUrl": "./", // 비상대적 import 모듈 해석시 기준이 되는 경로
    "sourceMap": true, // map 파일을 생성할 것인가
    "noImplicitAny": false, // any 타입으로 구현된 포현식 혹은 정의를 에러처리 할 것인가
    "pretty": true, // 에러와 메세지를 색, 컨텍스트를 사용해서 스타일을 지정할 것인가
    "strictFunctionTypes": true, // 함수, 메소드의 인자 타입을 더 정확히 추론할 것인가
    "noImplicitThis": true, // any 타입으로 암시한 this 표현식에 오류를 보고할 것인가
    "noImplicitReturns": true, // void가 아닌 함수가 리턴을 제대로 하지 않는 경우가 있다면 에러 발생
    "noEmitOnError": true, // 에러 발생시 js 소스코드, source map, declaration 등이 생성되지 않는다
    "noUnusedLocals": false,
    "downlevelIteration": true // 사용되지 않는 지역변수에 대해 에러를 발생시킬 것인가
  },
  "include": ["./src/"],
  "exclude": ["node_modules", "dist"]
}
